diff --git a/.gitlab-ci.yml b/.gitlab-ci.yml
index 88ed826c8..e0760af26 100644
--- a/.gitlab-ci.yml
+++ b/.gitlab-ci.yml
@@ -83,6 +83,7 @@ include:
       debhelper-compat
       findutils
       git
+      libapparmor-dev
       libasound2-dev
       libavcodec-dev
       libavfilter-dev
@@ -94,6 +95,7 @@ include:
       libgstreamer-plugins-base1.0-dev
       libsbc-dev
       libsdl2-dev
+      libsnapd-glib-dev
       libudev-dev
       libva-dev
       libv4l-dev
@@ -228,7 +230,7 @@ build_on_ubuntu:
     - .build
   stage: build
   variables:
-    MESON_OPTIONS: "-Dsession-managers=[]"
+    MESON_OPTIONS: "-Dsession-managers=[] -Dsnap=enabled"
 
 .build_on_fedora:
   extends:
@@ -255,6 +257,7 @@ build_on_fedora:
         -Dsdl2=enabled
         -Dsndfile=enabled
         -Dsession-managers=[]
+        -Dsnap=disabled
   artifacts:
     name: pipewire-$CI_COMMIT_SHA
     when: always
@@ -270,7 +273,7 @@ build_on_alpine:
     - .build
   stage: build
   variables:
-    MESON_OPTIONS: "-Dsession-managers=[]"
+    MESON_OPTIONS: "-Dsession-managers=[] -Dsnap=disabled"
 
 # build with all auto() options enabled
 build_all:
@@ -287,6 +290,7 @@ build_all:
         -Droc=disabled
         -Dlibcamera=disabled
         -Dsession-managers=[]
+        -Dsnap=disabled
   parallel:
     matrix:
       - CC: [gcc, clang]
@@ -296,7 +300,7 @@ build_with_no_commandline_options:
   extends:
     - .build_on_fedora
   variables:
-    MESON_OPTIONS: "-Dsession-managers=[]"
+    MESON_OPTIONS: "-Dsession-managers=[] -Dsnap=disabled"
   parallel:
     matrix:
       - CC: [gcc, clang]
@@ -323,7 +327,7 @@ build_release:
   extends:
     - .build_on_fedora
   variables:
-    MESON_OPTIONS: "-Dtest=enabled -Dbuildtype=release -Db_ndebug=true -Dsession-managers=[]"
+    MESON_OPTIONS: "-Dtest=enabled -Dbuildtype=release -Db_ndebug=true -Dsession-managers=[] -Dsnap=disabled"
   parallel:
     matrix:
       - CC: [gcc, clang]
@@ -337,7 +341,7 @@ build_session_managers:
     - ninja $NINJA_ARGS -C "$BUILD_DIR"
     - ninja $NINJA_ARGS -C "$BUILD_DIR" install
   variables:
-    MESON_OPTIONS: "-Dsession-managers=$SESSION_MANAGERS"
+    MESON_OPTIONS: "-Dsession-managers=$SESSION_MANAGERS -Dsnap=disabled"
   parallel:
     matrix:
       - SESSION_MANAGERS: ["[]", "wireplumber", "media-session", "media-session,wireplumber", "wireplumber,media-session" ]
@@ -353,7 +357,7 @@ build_meson_prerelease:
     - ninja $NINJA_ARGS -C "$BUILD_DIR"
     - ninja $NINJA_ARGS -C "$BUILD_DIR" install
   variables:
-    MESON_OPTIONS: "-Dsession-managers=wireplumber,media-session"
+    MESON_OPTIONS: "-Dsession-managers=wireplumber,media-session -Dsnap=disabled"
   allow_failure: true
 
 build_meson_exact_release:
@@ -370,7 +374,7 @@ build_meson_exact_release:
     - ninja $NINJA_ARGS -C "$BUILD_DIR"
     - ninja $NINJA_ARGS -C "$BUILD_DIR" install
   variables:
-    MESON_OPTIONS: "-Dsession-managers=[]"
+    MESON_OPTIONS: "-Dsession-managers=[] -Dsnap=disabled"
 
 valgrind:
   extends:
diff --git a/meson.build b/meson.build
index 6b475b244..f0131693d 100644
--- a/meson.build
+++ b/meson.build
@@ -399,6 +399,23 @@ lilv_lib = dependency('lilv-0', required: get_option('lv2'))
 summary({'lilv (for lv2 plugins)': lilv_lib.found()}, bool_yn: true)
 cdata.set('HAVE_LILV', lilv_lib.found())
 
+glib2_snap_dep = dependency('glib-2.0', required : get_option('snap'))
+gio2_snap_dep = dependency('gio-2.0', required : get_option('snap'))
+apparmor_snap_dep = dependency('libapparmor', required : get_option('snap'))
+if dependency('snapd-glib', required: false).found()
+  snap_dep = dependency('snapd-glib', required : get_option('snap'))
+else
+  snap_dep = dependency('snapd-glib-2', required : get_option('snap'))
+endif
+if snap_dep.found() and glib2_snap_dep.found() and gio2_snap_dep.found() and apparmor_snap_dep.found()
+  cdata.set('HAVE_SNAP', 1)
+  snap_deps = [glib2_snap_dep, gio2_snap_dep, snap_dep, apparmor_snap_dep]
+endif
+summary({'GLib-2.0 (Snap support)': glib2_snap_dep.found()}, bool_yn: true, section: 'Misc dependencies')
+summary({'Gio-2.0 (Snap support)': gio2_snap_dep.found()}, bool_yn: true, section: 'Misc dependencies')
+summary({'Apparmor (Snap support)': apparmor_snap_dep.found()}, bool_yn: true, section: 'Misc dependencies')
+summary({'Snapd-glib (Snap support)': snap_dep.found()}, bool_yn: true, section: 'Misc dependencies')
+
 check_functions = [
   ['gettid', '#include <unistd.h>', ['-D_GNU_SOURCE'], []],
   ['memfd_create', '#include <sys/mman.h>', ['-D_GNU_SOURCE'], []],
diff --git a/meson_options.txt b/meson_options.txt
index af72586b0..05e5287e0 100644
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -318,3 +318,7 @@ option('rlimits-nice',
        min: -20,
        max: -1,
        value: -19)
+option('snap',
+       description : 'Snap support is available.',
+       type : 'feature',
+       value : 'auto')
diff --git a/src/modules/meson.build b/src/modules/meson.build
index 717fbf2a6..8e4a55908 100644
--- a/src/modules/meson.build
+++ b/src/modules/meson.build
@@ -264,6 +264,7 @@ pipewire_module_protocol_pulse_sources = [
   'module-protocol-pulse/reply.c',
   'module-protocol-pulse/sample.c',
   'module-protocol-pulse/sample-play.c',
+  'module-protocol-pulse/sandbox_access.c',
   'module-protocol-pulse/server.c',
   'module-protocol-pulse/stream.c',
   'module-protocol-pulse/utils.c',
@@ -294,6 +295,13 @@ pipewire_module_protocol_pulse_sources = [
   'module-protocol-pulse/modules/module-zeroconf-discover.c',
 ]
 
+if snap_dep.found() and glib2_snap_dep.found() and gio2_snap_dep.found() and apparmor_snap_dep.found()
+  pipewire_module_protocol_pulse_sources += [
+    'module-protocol-pulse/snap-policy.c',
+  ]
+  pipewire_module_protocol_pulse_deps += snap_deps
+endif
+
 if dbus_dep.found()
   pipewire_module_protocol_pulse_sources += [
     'module-protocol-pulse/dbus-name.c',
diff --git a/src/modules/module-protocol-pulse/client.c b/src/modules/module-protocol-pulse/client.c
index 1a4ef85db..32fa8c02b 100644
--- a/src/modules/module-protocol-pulse/client.c
+++ b/src/modules/module-protocol-pulse/client.c
@@ -28,6 +28,7 @@
 #include "pending-sample.h"
 #include "server.h"
 #include "stream.h"
+#include "sandbox_access.h"
 
 #define client_emit_disconnect(c) spa_hook_list_call(&(c)->listener_list, struct client_events, disconnect, 0)
 
@@ -165,6 +166,7 @@ void client_free(struct client *client)
 
 	spa_hook_list_clean(&client->listener_list);
 
+	pw_sandbox_access_freed_client(client);
 	free(client);
 }
 
diff --git a/src/modules/module-protocol-pulse/pulse-server.c b/src/modules/module-protocol-pulse/pulse-server.c
index 08d90e829..add99e570 100644
--- a/src/modules/module-protocol-pulse/pulse-server.c
+++ b/src/modules/module-protocol-pulse/pulse-server.c
@@ -55,6 +55,7 @@
 #include "stream.h"
 #include "utils.h"
 #include "volume.h"
+#include "sandbox_access.h"
 
 #define DEFAULT_MIN_REQ		"256/48000"
 #define DEFAULT_DEFAULT_REQ	"960/48000"
@@ -1584,6 +1585,9 @@ static int do_create_playback_stream(struct client *client, uint32_t command, ui
 	if (props == NULL)
 		goto error_errno;
 
+	if (!pw_sandbox_access_check_permissions(client, PW_SANDBOX_ACCESS_PLAYBACK))
+		goto error_no_permissions;
+
 	if (client->version < 13) {
 		if ((res = message_get(m,
 				TAG_STRING, &name,
@@ -1796,6 +1800,9 @@ error_protocol:
 error_no_formats:
 	res = -ENOTSUP;
 	goto error;
+error_no_permissions:
+	res = -EACCES;
+	goto error;
 error_invalid:
 	res = -EINVAL;
 	goto error;
@@ -1848,6 +1855,10 @@ static int do_create_record_stream(struct client *client, uint32_t command, uint
 	if (props == NULL)
 		goto error_errno;
 
+	// check permissions
+	if (!pw_sandbox_access_check_permissions(client, PW_SANDBOX_ACCESS_RECORD))
+		goto error_no_permissions;
+
 	if (client->version < 13) {
 		if (message_get(m,
 				TAG_STRING, &name,
@@ -2066,6 +2077,9 @@ error_protocol:
 error_no_formats:
 	res = -ENOTSUP;
 	goto error;
+error_no_permissions:
+	res = -EACCES;
+	goto error;
 error_invalid:
 	res = -EINVAL;
 	goto error;
diff --git a/src/modules/module-protocol-pulse/sandbox_access.c b/src/modules/module-protocol-pulse/sandbox_access.c
new file mode 100644
index 000000000..dd2b92e20
--- /dev/null
+++ b/src/modules/module-protocol-pulse/sandbox_access.c
@@ -0,0 +1,49 @@
+/* PipeWire Sandbox access manager
+ *
+ * Copyright Â© 2022 Sergio Costas (sergio.costas@canonical.com)
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#include <config.h>
+#include <pipewire/pipewire.h>
+
+#include "sandbox_access.h"
+#include "snap-policy.h"
+
+bool pw_sandbox_access_check_permissions(struct client *client, pw_sandbox_access_t perms)
+{
+    pw_sandbox_access_t permissions;
+
+#ifdef HAVE_SNAP
+    permissions = pw_snap_get_audio_permissions(client);
+    if ((permissions & PW_SANDBOX_ACCESS_NOT_A_SANDBOX) == 0)
+        return (perms & permissions) == perms;
+#endif // HAVE_SNAP
+    // add here checks for other sandbox technologies, like Flatpak
+    return true;
+}
+
+void pw_sandbox_access_freed_client(struct client *client) {
+#ifdef HAVE_SNAP
+    pw_snap_freed_client(client);
+#endif // HAVE_SNAP
+    // add here checks for other sandbox technologies, like Flatpak
+}
diff --git a/src/modules/module-protocol-pulse/sandbox_access.h b/src/modules/module-protocol-pulse/sandbox_access.h
new file mode 100644
index 000000000..c54ad491e
--- /dev/null
+++ b/src/modules/module-protocol-pulse/sandbox_access.h
@@ -0,0 +1,63 @@
+/* PipeWire Sandbox access manager
+ *
+ * Copyright Â© 2022 Sergio Costas (sergio.costas@canonical.com)
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice (including the next
+ * paragraph) shall be included in all copies or substantial portions of the
+ * Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ */
+
+#ifndef _SANDBOX_ACCESS_H_
+#define _SANDBOX_ACCESS_H_
+
+#include "client.h"
+#include <stdbool.h>
+
+/**
+ * These are the permissions that a sandbox module can return.
+ * Currently, only Snap sandboxes are supported, so PW_SANDBOX_ACCESS_NOT_A_SANDBOX
+ * can seem redundant; but the idea is to be able to support more sandboxing
+ * technologies, like Flatpak. In this case, that value makes sense:
+ * if a sandbox module doesn't identify the process as belonging to a sandbox of
+ * their type, it will return PW_SANDBOX_ACCESS_NOT_A_SANDBOX, so the next sandbox
+ * module will be tried. If none of the sandbox modules detect the process as theirs,
+ * then PW_SANDBOX_ACCESS_ALL permissions will be granted, because it is presumed
+ * that it is a non-sandboxed process.
+ *
+ * To add other sandboxing systems, just modify *pw_sandbox_access_check_permissions()*
+ * function in *sandbox_access.c*, to include a call to get the permissions from
+ * your module.
+ */
+
+typedef enum _pw_sandbox_access {
+    PW_SANDBOX_ACCESS_NONE           = 0,
+    PW_SANDBOX_ACCESS_NOT_A_SANDBOX  = 1 << 0,
+    PW_SANDBOX_ACCESS_RECORD         = 1 << 1,
+    PW_SANDBOX_ACCESS_PLAYBACK       = 1 << 2,
+} pw_sandbox_access_t;
+
+#define PW_SANDBOX_ACCESS_ALL PW_SANDBOX_ACCESS_RECORD|PW_SANDBOX_ACCESS_PLAYBACK
+
+bool pw_sandbox_access_check_permissions(struct client *client, pw_sandbox_access_t permissions);
+/**
+ * This function is called every time a struct client is freed. It is useful to remove
+ * it from any kind of cache used in the backends.
+ */
+void pw_sandbox_access_freed_client(struct client *client);
+
+#endif // _SANDBOX_ACCESS_H_
diff --git a/src/modules/module-protocol-pulse/snap-policy.c b/src/modules/module-protocol-pulse/snap-policy.c
new file mode 100644
index 000000000..04d6ee334
--- /dev/null
+++ b/src/modules/module-protocol-pulse/snap-policy.c
@@ -0,0 +1,170 @@
+/***
+    This file is part of PipeWire.
+
+    Copyright 2022 Canonical Ltd.
+    Authors:
+      Sergio Costas <sergio.costas@canonical.com>
+
+    PipeWire is free software; you can redistribute it and/or modify
+    it under the terms of the GNU Lesser General Public License as published
+    by the Free Software Foundation; either version 2.1 of the License,
+    or (at your option) any later version.
+
+    PipeWire is distributed in the hope that it will be useful, but
+    WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+    General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public License
+    along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.
+***/
+
+#ifdef HAVE_CONFIG_H
+#include <config.h>
+#endif
+
+#include <glib.h>
+#include <snapd-glib/snapd-glib.h>
+#include <pipewire/pipewire.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include "client.h"
+#include <sys/apparmor.h>
+#include <errno.h>
+#include "snap-policy.h"
+#include <fcntl.h>
+
+#define SNAP_LABEL_PREFIX      "snap."
+
+static GHashTable *client_cache = NULL;
+
+void pw_snap_freed_client(struct client *client) {
+    if (client_cache != NULL) {
+        pw_log_debug("Freeing %p from snap cache\n", client);
+        g_hash_table_remove(client_cache, client);
+    }
+}
+
+pw_sandbox_access_t pw_snap_get_audio_permissions(struct client *client)
+{
+    pid_t pid;
+    g_autofree gchar* aa_label = NULL;
+    g_autofree gchar* snap_id = NULL;
+    gchar* snap_confinement = NULL;
+    gchar *separator;
+    g_autoptr(SnapdClient) snapdclient = NULL;
+    g_autoptr(GPtrArray) plugs = NULL;
+    gboolean retv;
+    pw_sandbox_access_t permissions = PW_SANDBOX_ACCESS_NONE;
+    pw_sandbox_access_t add_permission = PW_SANDBOX_ACCESS_NONE;
+    SnapdPlug **plug = NULL;
+    GPtrArray *slots;
+    SnapdSlotRef **slot;
+
+    if (client == NULL) {
+        pw_log_warn("Called snap_get_audio_permissions with NULL parameter.");
+        return PW_SANDBOX_ACCESS_NONE;
+    }
+
+    if (client_cache == NULL)
+        client_cache = g_hash_table_new(g_direct_hash, g_direct_equal);
+
+    if (g_hash_table_contains(client_cache, client)) {
+        permissions = GPOINTER_TO_INT(g_hash_table_lookup(client_cache, client));
+        pw_log_debug("Using cached permissions for %p in snap cache: %X\n", client, permissions);
+        return permissions;
+    }
+
+    // Get SNAP ID
+    if (pw_properties_fetch_int32(client->props, PW_KEY_APP_PROCESS_ID, &pid) != 0) {
+        pw_log_warn("snap_get_audio_permissions: failed to get 'application.process.id' property as an int32 value.");
+        permissions = PW_SANDBOX_ACCESS_NONE;
+        goto return_permissions;
+    }
+
+    if (aa_gettaskcon(pid, &aa_label, &snap_confinement) == -1) {
+        if (errno == EINVAL) {
+            // if apparmor isn't enabled, we can safely assume that there are no SNAPs in the system
+            permissions = PW_SANDBOX_ACCESS_NOT_A_SANDBOX;
+            goto return_permissions;
+        }
+        permissions = PW_SANDBOX_ACCESS_NONE;
+        goto return_permissions;
+    }
+    if (!g_str_has_prefix(aa_label, SNAP_LABEL_PREFIX)) {
+        // not a SNAP.
+        pw_log_info("snap_get_audio_permissions: not an snap.");
+        permissions = PW_SANDBOX_ACCESS_NOT_A_SANDBOX;
+        goto return_permissions;
+    }
+    // it's a "classic" or a "devmode" confinement snap, so we give it full access
+    if (!g_strcmp0 (snap_confinement, "complain")) {
+        permissions = PW_SANDBOX_ACCESS_ALL;
+        goto return_permissions;
+    }
+
+    snap_id = strdup(aa_label + strlen(SNAP_LABEL_PREFIX));
+    separator = strchr(snap_id, '.');
+    if (separator != NULL)
+        *separator = 0;
+
+    snapdclient = snapd_client_new();
+    if (snapdclient == NULL) {
+        pw_log_warn("snap_get_audio_permissions: error creating SnapdClient object.");
+        return PW_SANDBOX_ACCESS_NONE;
+    }
+
+    retv = snapd_client_get_connections2_sync(snapdclient,
+                                              SNAPD_GET_CONNECTIONS_FLAGS_NONE,
+                                              snap_id,
+                                              NULL,
+                                              NULL,
+                                              NULL,
+                                              &plugs,
+                                              NULL,
+                                              NULL,
+                                              NULL);
+    if (retv == FALSE) {
+        pw_log_warn("Failed to get Snap connections for snap %s\n", snap_id);
+        return PW_SANDBOX_ACCESS_NONE;
+    }
+    if (plugs == NULL) {
+        pw_log_warn("Failed to get Snap connections for snap %s\n", snap_id);
+        return PW_SANDBOX_ACCESS_NONE;
+    }
+    if (plugs->pdata == NULL) {
+        pw_log_warn("Failed to get Snap connections for snap %s\n", snap_id);
+        return PW_SANDBOX_ACCESS_NONE;
+    }
+
+    plug = (SnapdPlug **)plugs->pdata;
+    for (guint p = 0; p < plugs->len; p++, plug++) {
+        const gchar *plug_name = snapd_plug_get_name(*plug);
+        if (!g_strcmp0("audio-record", plug_name)) {
+            add_permission = PW_SANDBOX_ACCESS_RECORD;
+        } else if (!g_strcmp0("audio-playback", plug_name)) {
+            add_permission = PW_SANDBOX_ACCESS_PLAYBACK;
+        } else if (!g_strcmp0("pulseaudio", plug_name)) {
+            add_permission = PW_SANDBOX_ACCESS_ALL;
+        } else {
+            continue;
+        }
+        slots = snapd_plug_get_connected_slots(*plug);
+        if (slots == NULL)
+            continue;
+        slot = (SnapdSlotRef**) slots->pdata;
+
+        for (guint q = 0; q < slots->len; q++, slot++) {
+            const gchar *slot_name = snapd_slot_ref_get_slot (*slot);
+            const gchar *snap_name = snapd_slot_ref_get_snap (*slot);
+            if ((0 == g_strcmp0 (snap_name, "snapd")) &&
+                (0 == g_strcmp0 (slot_name, plug_name)))
+                    permissions |= add_permission;
+        }
+    }
+
+return_permissions:
+    g_hash_table_insert(client_cache, client, GINT_TO_POINTER(permissions));
+    pw_log_debug("Caching permissions for %p in snap cache: %X\n", client, permissions);
+    return permissions;
+}
diff --git a/src/modules/module-protocol-pulse/snap-policy.h b/src/modules/module-protocol-pulse/snap-policy.h
new file mode 100644
index 000000000..169efcfa7
--- /dev/null
+++ b/src/modules/module-protocol-pulse/snap-policy.h
@@ -0,0 +1,30 @@
+/***
+    This file is part of PipeWire.
+
+    Copyright 2022 Canonical Ltd.
+    Authors:
+      Sergio Costas <sergio.costas@canonical.com>
+
+    PipeWire is free software; you can redistribute it and/or modify
+    it under the terms of the GNU Lesser General Public License as published
+    by the Free Software Foundation; either version 2.1 of the License,
+    or (at your option) any later version.
+
+    PipeWire is distributed in the hope that it will be useful, but
+    WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+    General Public License for more details.
+
+    You should have received a copy of the GNU Lesser General Public License
+    along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.
+***/
+
+#ifndef _SNAP_POLICY_H_
+#define _SNAP_POLICY_H_
+
+#include "sandbox_access.h"
+
+pw_sandbox_access_t pw_snap_get_audio_permissions(struct client *client);
+void pw_snap_freed_client(struct client *client);
+
+#endif // _SNAP_POLICY_H_
